---
# wget (deault) or curl
- name: determine if wget or curl is installed
  block:
    - name: Check if wget or curl is installed
      command: "which {{ nvm_install }}"
      register: cmd
      changed_when: "cmd.rc != 0"

    - name: Determine if install type wget
      set_fact:
        run_command: 'wget -qO-'
      when: "'/wget' in cmd.stdout"

    - name: Determine if install type curl
      set_fact:
        run_command: 'curl -o-'
      when: "'/curl' in cmd.stdout"

  - name: Is the nvm_dir variable explicitly declared?
    block:
      
      - name: Create nvm_dir if it does not exist
        file:
          mode: 0775
          path: "{{ nvm_dir }}"
          state: directory
        become: true

      - name: Create profile if it does not exist
        file:
          mode: 0644
          path: "{{ nvm_profile }}"
          state: touch
        become: true

    when: "nvm_dir != ''"

    - name: Install NVM
      shell: "{{ run_command }} https://raw.githubusercontent.com/creationix/nvm/v{{ nvm_version }}/install.sh | NVM_SOURCE={{ nvm_source }} NVM_DIR={{ nvm_dir }} PROFILE={{ nvm_profile }} bash"
      args:
        warn: false
      register: nvm_result
      changed_when: "'already installed' not in nvm_result.stdout"

  when: nvm_install in ['curl', 'wget']

# git
- name: install via git
  block:
    - name: Check if git is installed
      command: "which {{ nvm_install }}"
      register: cmd

    - name: Remove NVM nvm_profile
      blockinfile:
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
        marker_begin: "Installed via {{ role_repo }} START"
        marker_end: "{{ role_repo }} END"
        path: "{{ nvm_profile }}"
        state: absent

    - name: Install via git
      git:
        dest: "{{ nvm_dir }}"
        repo: 'https://github.com/creationix/nvm.git .nvm'
        version: "{{ nvm_version }}"
      when: "'/git' in cmd.stdout"

    - name: Add NVM to nvm_profile
      blockinfile:
        block: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
        create: yes
        marker_begin: "Installed nvm via {{ role_repo }} START"
        marker_end: "{{ role_repo }} END"
        mode: 0644
        path: "{{ nvm_profile }}"
        state: present

  when: "nvm_install == 'git'"

- name: Check NVM Version # noqa 305
  shell: bash -ic "nvm --version"
  register: nvm_version_response
  changed_when: "nvm_version_response.rc != 0"

# Autocomplete
- name: Add NVM autocomplete to nvm_profile
  blockinfile:
    block: |
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    insertafter: "# This loads nvm"
    marker_begin: "Installed nvm autocomplete via {{ role_repo }} START"
    marker_end: "{{ role_repo }} END"
    mode: 0644
    path: "{{ nvm_profile }}"
    state: present
  when: autocomplete

- name: LTS Check
  set_fact:
    nodejs_version: --lts
  when: "nodejs_version == 'lts'"

# This scenario handles the first run/install of NVM because this will automatically
# alias the specified version as default - This should handle most use cases
- name: Install Node # noqa 305
  shell: bash -ic "nvm install {{ nodejs_version }}"
  register: node_version_response
  changed_when: "'already installed' not in node_version_response.stderr"

# In the event there are multiple versions of Node being installed/used/upgraded
# on the same machine we'll need to alias the default version accordingly
- name: Set default version of Node if multiple versions exist # noqa 305
  shell: bash -ic "nvm alias default {{ nodejs_version }}"
  when:  default

- name: Run whatever nvm_commands are there # noqa 305
  shell: bash -ic "{{ item }}"
  with_items:
    "{{ nvm_commands }}"
  when: nvm_commands | length > 0

# Uninstall NVM
- name: uninstall nvm
  block:

  - name: Uninstall NVM
    file:
      path: "{{ lookup('env','NVM_DIR') }}"
      state: absent

  - name: Remove NVM nvm_profile info
    lineinfile:
      regexp: '^export.+nvm\"|\[.+nvm'
      path: "{{ nvm_profile }}"
      state: absent

  - name: Remove NVM autocomplete from nvm_profile
    blockinfile:
      block: |
        [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
      marker_begin: "Installed via {{ role_repo }} START"
      marker_end: "{{ role_repo }} END"
      path: "{{ nvm_profile }}"
      state: absent

  when: uninstall
